{"version":3,"sources":["components/Button/Button.js","components/services/ImageApi.js","components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Modal/Modal.js","components/Loader/Loader.js","App.js","index.js"],"names":["Button","fetchImages","type","onClick","className","API_KEY","API_URL","query","page","a","searchParams","URLSearchParams","key","q","per_page","image_type","orientation","url","fetch","fetchImg","json","images","imageApi","Searchbar","onSubmit","useState","setQuery","e","preventDefault","trim","toast","error","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","ImageGaleryItem","image","openModal","webformatURL","tags","id","src","alt","ImageGalerry","map","MODAL_ROOT","document","querySelector","Modal","onClose","children","useEffect","window","addEventListener","code","createPortal","LoaderSpin","color","height","width","timeout","App","setImages","setPage","modalImageId","setModalImageId","setOpenModal","isLoading","setIsLoading","then","img","prevImages","hits","scrollTo","top","documentElement","scrollHeight","behavior","catch","Error","finally","imageFind","find","Number","Loader","prevState","autoclose","largeImageURL","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cbfc31d2.chunk.js","sourcesContent":["const Button = ({ fetchImages }) => {\r\n  return (\r\n    <button type=\"button\" onClick={fetchImages} className=\"Button\">\r\n      Load more...\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","const API_KEY = '19045018-7ef62a7ed2607017cbe478eaf';\r\nconst API_URL = 'https://pixabay.com/api/';\r\n\r\nasync function fetchImages(query, page) {\r\n  const searchParams = new URLSearchParams({\r\n    key: API_KEY,\r\n    q: query,\r\n    page: page,\r\n    per_page: 12,\r\n    image_type: 'photo',\r\n    orientation: 'horizontal',\r\n  });\r\n\r\n  const url = `${API_URL}?${searchParams}`;\r\n\r\n  const fetchImg = await fetch(url);\r\n  const images = await fetchImg.json();\r\n\r\n  return images;\r\n}\r\n\r\nconst imageApi = { fetchImages };\r\n\r\nexport default imageApi;\r\n","import { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleQueryChange = (e) => {\r\n    setQuery(e.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleQuerySubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (query.trim() === \"\") {\r\n      toast.error(\"Самурай! Напиши запрос!\");\r\n      return;\r\n    }\r\n    onSubmit(query);\r\n\r\n    setQuery(\"\");\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleQuerySubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          value={query}\r\n          onChange={handleQueryChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\n// export default class Searchbar extends Component {\r\n//   state = {\r\n//     query: '',\r\n//   };\r\n\r\n//   handleQueryChange = event => {\r\n//     this.setState({ query: event.currentTarget.value.toLowerCase() });\r\n//   };\r\n\r\n//   handleQuerySubmit = event => {\r\n//     event.preventDefault();\r\n\r\n//     if (this.state.query.trim() === '') {\r\n//       toast.error('Самурай! Напиши запрос!');\r\n//       return;\r\n//     }\r\n//     this.props.onSubmit(this.state.query);\r\n\r\n//     this.setState({ query: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <header className=\"Searchbar\">\r\n//         <form className=\"SearchForm\" onSubmit={this.handleQuerySubmit}>\r\n//           <button type=\"submit\" className=\"SearchForm-button\">\r\n//             <span className=\"SearchForm-button-label\">Search</span>\r\n//           </button>\r\n\r\n//           <input\r\n//             className=\"SearchForm-input\"\r\n//             type=\"text\"\r\n//             autoComplete=\"off\"\r\n//             autoFocus\r\n//             placeholder=\"Search images and photos\"\r\n//             value={this.state.query}\r\n//             onChange={this.handleQueryChange}\r\n//           />\r\n//         </form>\r\n//       </header>\r\n//     );\r\n//   }\r\n// }\r\n","const ImageGaleryItem = ({ image, openModal }) => {\r\n  const { webformatURL, tags } = image;\r\n\r\n  return (\r\n    <li id={image.id} onClick={openModal} className=\"ImageGalleryItem\">\r\n      <img src={webformatURL} alt={tags} className=\"ImageGalleryItem-image\" />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ImageGaleryItem;\r\n","import React from 'react';\r\nimport ImageGaleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\n\r\nfunction ImageGalerry({ images, openModal }) {\r\n  return (\r\n    <div>\r\n      <ul className=\"ImageGallery\">\r\n        {images.map(image => (\r\n          <ImageGaleryItem openModal={openModal} key={image.id} image={image} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageGalerry;\r\n","import { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst MODAL_ROOT = document.querySelector(\"#modal-root\");\r\n\r\nexport default function Modal({ onClose, children }) {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      if (e.code !== \"Escape\") {\r\n        return;\r\n      }\r\n\r\n      onClose();\r\n    });\r\n  });\r\n\r\n  return createPortal(\r\n    <div onClick={onClose} className=\"Overlay\">\r\n      <div>{children}</div>\r\n    </div>,\r\n    MODAL_ROOT\r\n  );\r\n}\r\n\r\n// export default class Modal extends Component {\r\n//   componentDidMount() {\r\n//     window.addEventListener('keydown', this.handleOnClose);\r\n//   }\r\n\r\n//   componentWillUnmount() {\r\n//     window.addEventListener('keydown', this.handleOnClose);\r\n//   }\r\n\r\n//   handleOnClose = e => {\r\n//     if (e.code !== 'Escape') {\r\n//       return;\r\n//     }\r\n\r\n//     this.props.onClose();\r\n//   };\r\n\r\n//   render() {\r\n// return createPortal(\r\n//   <div onClick={this.props.onClose} className=\"Overlay\">\r\n//     <div>{this.props.children}</div>\r\n//   </div>,\r\n//   MODAL_ROOT,\r\n// );\r\n//   }\r\n// }\r\n","import Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nconst LoaderSpin = () => {\r\n  return (\r\n    <Loader\r\n      type=\"Circles\"\r\n      color=\"#00BFFF\"\r\n      height={100}\r\n      width={100}\r\n      timeout={3000}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LoaderSpin;\r\n","import { useState, useEffect } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\nimport Button from './components/Button/Button';\nimport imageApi from './components/services/ImageApi';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport ImageGalerry from './components/ImageGallery/ImageGallery';\nimport Modal from './components/Modal/Modal';\nimport LoaderSpin from './components/Loader/Loader';\n\nexport default function App() {\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(null);\n  const [modalImageId, setModalImageId] = useState(null);\n  const [openModal, setOpenModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    setIsLoading('true');\n    imageApi\n      .fetchImages(query, page)\n      .then(img => {\n        setImages(prevImages => [...prevImages, ...img.hits]);\n        setPage(page);\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: 'smooth',\n        });\n      })\n      .catch(error => {\n        throw new Error(error);\n      })\n      .finally(setIsLoading(false));\n  }, [page, query]);\n\n  const onSearch = query => {\n    setQuery(query);\n    setImages([]);\n    setPage(1);\n  };\n\n  const loadMore = () => {\n    setPage(prevState => prevState + 1);\n  };\n\n  const onOpenModal = e => {\n    setOpenModal(true);\n    setModalImageId(Number(e.currentTarget.id));\n  };\n\n  const closeModal = () => {\n    setOpenModal(false);\n  };\n\n  const imageFind = () => {\n    const largeImg = images.find(image => {\n      return image.id === modalImageId;\n    });\n    return largeImg;\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={onSearch} />\n      <ImageGalerry openModal={onOpenModal} images={images} />\n      {isLoading && <LoaderSpin />}\n      <Button fetchImages={loadMore} />\n      <ToastContainer autoclose={3000} />\n      {openModal && (\n        <Modal id={modalImageId} onClose={closeModal}>\n          <img src={imageFind().largeImageURL} alt={imageFind().tags}></img>\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     images: [],\n//     page: 1,\n//     query: null,\n//     modalImage: [],\n//     modalImageID: null,\n//     openModal: false,\n//     isLoading: false,\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (\n//       prevState.query !== this.state.query ||\n//       prevState.page !== this.state.page\n//     ) {\n//       this.fetchImg();\n//     }\n//   }\n\n//   onSearch = (query) => {\n//     this.setState({ query, images: [], page: 1 });\n//   };\n\n//   fetchImg() {\n//     const { query, page, images } = this.state;\n//     this.setState({ isLoading: true });\n//     imageApi\n//       .fetchImages(query, page)\n//       .then((img) =>\n//         this.setState({\n//           images: [...images, ...img.hits],\n//           page: page,\n//         })\n//       )\n//       .catch((error) => {\n//         throw new Error(error);\n//       })\n//       .finally(\n//         this.setState({ isLoading: false }),\n//         window.scrollTo({\n//           top: document.documentElement.scrollHeight,\n//           behavior: \"smooth\",\n//         })\n//       );\n//   }\n\n//   loadMore = () => {\n//     this.setState((prevState) => ({ page: prevState.page + 1 }));\n//   };\n\n//   onOpenModal = (e) => {\n//     this.setState({\n//       openModal: true,\n//       modalImageID: Number(e.currentTarget.id),\n//     });\n//   };\n\n//   closeModal = () => {\n//     this.setState({ openModal: false });\n//   };\n\n//   imageFind = () => {\n//     const largeImg = this.state.images.find((image) => {\n//       return image.id === this.state.modalImageID;\n//     });\n\n//     return largeImg;\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.onSearch} />\n//         <ImageGalerry openModal={this.onOpenModal} images={this.state.images} />\n//         {this.state.isLoading && <LoaderSpin />}\n//         <Button fetchImages={this.loadMore} />\n//         <ToastContainer autoclose={3000} />\n//         {this.state.openModal && (\n//           <Modal id={this.state.modalImageID} onClose={this.closeModal}>\n//             <img\n//               src={this.imageFind().largeImageURL}\n//               alt={this.imageFind().tags}\n//             ></img>\n//           </Modal>\n//         )}\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n\n// fetchImg(){\n//     setIsLoading('true');\n//     imageApi\n//       .fetchImages(query, page)\n//       .then(img => {\n//         setImages([...images, ...img.hits]);\n//         setPage(page);\n//       })\n//       .catch(error => {\n//         throw new Error(error);\n//       })\n//       .finally(\n//         setIsLoading(false),\n//         window.scrollTo({\n//           top: document.documentElement.scrollHeight,\n//           behavior: 'smooth',\n//         }),\n//       );\n//   };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}